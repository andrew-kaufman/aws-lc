Index: aws-lc/third_party/boringssl/ssl/ssl_session.cc
===================================================================
--- aws-lc.orig/third_party/boringssl/ssl/ssl_session.cc
+++ aws-lc/third_party/boringssl/ssl/ssl_session.cc
@@ -433,17 +433,21 @@ int ssl_ctx_rotate_ticket_encryption_key
          ctx->ticket_key_current->next_rotation_tv_sec > now.tv_sec) &&
         (!ctx->ticket_key_prev ||
          ctx->ticket_key_prev->next_rotation_tv_sec > now.tv_sec)) {
+      printf("BBBBB\n");
       return 1;
     }
   }
 
+  printf("CCCCC\n");
   MutexWriteLock lock(&ctx->lock);
   if (!ctx->ticket_key_current ||
       (ctx->ticket_key_current->next_rotation_tv_sec != 0 &&
        ctx->ticket_key_current->next_rotation_tv_sec <= now.tv_sec)) {
+    printf("DDDDD\n");
     // The current key has not been initialized or it is expired.
     auto new_key = bssl::MakeUnique<TicketKey>();
     if (!new_key) {
+      printf("EEEEE\n");
       return 0;
     }
     RAND_bytes(new_key->name, 16);
@@ -452,6 +456,7 @@ int ssl_ctx_rotate_ticket_encryption_key
     new_key->next_rotation_tv_sec =
         now.tv_sec + SSL_DEFAULT_TICKET_KEY_ROTATION_INTERVAL;
     if (ctx->ticket_key_current) {
+      printf("FFFFF\n");
       // The current key expired. Rotate it to prev and bump up its rotation
       // timestamp. Note that even with the new rotation time it may still be
       // expired and get dropped below.
@@ -459,15 +464,19 @@ int ssl_ctx_rotate_ticket_encryption_key
           SSL_DEFAULT_TICKET_KEY_ROTATION_INTERVAL;
       ctx->ticket_key_prev = std::move(ctx->ticket_key_current);
     }
+
+    printf("GGGGG\n");
     ctx->ticket_key_current = std::move(new_key);
   }
 
   // Drop an expired prev key.
   if (ctx->ticket_key_prev &&
       ctx->ticket_key_prev->next_rotation_tv_sec <= now.tv_sec) {
+    printf("HHHHH\n");
     ctx->ticket_key_prev.reset();
   }
 
+  printf("IIIII\n");
   return 1;
 }
 
Index: aws-lc/third_party/boringssl/ssl/ssl_lib.cc
===================================================================
--- aws-lc.orig/third_party/boringssl/ssl/ssl_lib.cc
+++ aws-lc/third_party/boringssl/ssl/ssl_lib.cc
@@ -1872,12 +1872,15 @@ int SSL_CTX_get_tlsext_ticket_keys(SSL_C
     return 0;
   }
 
+  printf("AAAAA\n");
   // The default ticket keys are initialized lazily. Trigger a key
   // rotation to initialize them.
   if (!ssl_ctx_rotate_ticket_encryption_key(ctx)) {
+    printf("JJJJJ\n");
     return 0;
   }
 
+  printf("KKKKK\n");
   uint8_t *out_bytes = reinterpret_cast<uint8_t *>(out);
   MutexReadLock lock(&ctx->lock);
   OPENSSL_memcpy(out_bytes, ctx->ticket_key_current->name, 16);
Index: aws-lc/third_party/boringssl/ssl/ssl_test.cc
===================================================================
--- aws-lc.orig/third_party/boringssl/ssl/ssl_test.cc
+++ aws-lc/third_party/boringssl/ssl/ssl_test.cc
@@ -2516,6 +2516,7 @@ TEST_P(SSLVersionTest, SessionTimeout) {
 TEST_P(SSLVersionTest, DefaultTicketKeyInitialization) {
   static const uint8_t kZeroKey[kTicketKeyLen] = {};
   uint8_t ticket_key[kTicketKeyLen];
+  printf("\nDefaultTicketKeyInitialization test.\n");
   ASSERT_EQ(1, SSL_CTX_get_tlsext_ticket_keys(server_ctx_.get(), ticket_key,
                                               kTicketKeyLen));
   ASSERT_NE(0, OPENSSL_memcmp(ticket_key, kZeroKey, kTicketKeyLen));
